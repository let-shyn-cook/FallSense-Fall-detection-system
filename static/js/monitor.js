document.addEventListener('DOMContentLoaded', function() {
    const cameraFeed = document.getElementById('cameraFeed');
    const startButton = document.getElementById('startBtn');
    const stopButton = document.getElementById('stopBtn');
    const fullscreenButton = document.getElementById('fullscreenBtn');
    const statusText = document.getElementById('statusText');
    const statusDot = document.getElementById('statusDot');
    const actionText = document.getElementById('actionText');
    const alertText = document.getElementById('alertText');
    alertText.textContent = 'B√¨nh th∆∞·ªùng'; // Thi·∫øt l·∫≠p tr·∫°ng th√°i m·∫∑c ƒë·ªãnh
    let videoElement = null;
    let stream = null;

    // Kh·ªüi t·∫°o bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ interval
    let statusCheckInterval = null;
    
    // URL c·ªßa backend API
    const API_URL = 'http://127.0.0.1:5000/api';
    const socket = io('http://127.0.0.1:5000');

    // Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng ƒë·ªÉ l∆∞u tr·ªØ tr·∫°ng th√°i theo d√µi
    const trackingStates = {};

    // X·ª≠ l√Ω s·ª± ki·ªán WebSocket
    socket.on('connect', () => {
        console.log('ƒê√£ k·∫øt n·ªëi v·ªõi server');
        statusText.textContent = 'ƒê√£ k·∫øt n·ªëi';
    });

    socket.on('disconnect', () => {
        console.log('M·∫•t k·∫øt n·ªëi v·ªõi server');
        statusText.textContent = 'M·∫•t k·∫øt n·ªëi';
    });

    socket.on('status_update', (data) => {
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i
        if (data.status) {
            statusText.textContent = data.status;
        }
        // C·∫≠p nh·∫≠t h√†nh ƒë·ªông
        if (data.action) {
            actionText.textContent = data.action;
        }
        // C·∫≠p nh·∫≠t c·∫£nh b√°o
        const alertCard = alertText.parentElement;
        const alertIcon = document.getElementById('alertIcon');
        if (data.fall_detected) {
            alertText.textContent = 'Ph√°t hi·ªán t√© ng√£!';
            alertIcon.textContent = '‚ö†Ô∏è';
            alertCard.style.backgroundColor = '#fee2e2';
            alertText.style.color = '#dc2626';
            alertCard.classList.add('alert-active');
        } else {
            alertText.textContent = 'B√¨nh th∆∞·ªùng';
            alertIcon.textContent = '‚úì';
            alertCard.style.backgroundColor = '#e6ffe6';
            alertText.style.color = '#008000';
            alertCard.classList.remove('alert-active');
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i theo d√µi cho ID c·ª• th·ªÉ
        if (data.track_id !== undefined) {
            trackingStates[data.track_id] = {
                action: data.action || 'ƒêang ch·ªù...',
                fall_detected: data.fall_detected || false
            };
            updateTrackingList();
        }
    });

    // L·∫Øng nghe s·ª± ki·ªán c·∫≠p nh·∫≠t t·ª´ WebSocket
    socket.on('status_update', (data) => {
        updateDetectionInfo(data);
    });

    // H√†m ki·ªÉm tra tr·∫°ng th√°i camera
    async function checkCameraStatus() {
        try {
            const response = await fetch(`${API_URL}/camera/status`);
            const data = await response.json();
            updateDetectionInfo(data);
        } catch (error) {
            console.error('L·ªói khi ki·ªÉm tra tr·∫°ng th√°i:', error);
        }
    }

    // Kh·ªüi t·∫°o camera
    async function startCamera() {
        try {
            // G·ª≠i y√™u c·∫ßu b·∫≠t camera ƒë·∫øn backend
            const response = await fetch(`${API_URL}/camera/start`, {
                method: 'POST'
            });
            const data = await response.json();
            
            if (data.success) {
                // T·∫°o video element ƒë·ªÉ hi·ªÉn th·ªã stream
                if (!videoElement) {
                    videoElement = document.createElement('img');
                    videoElement.style.width = '100%';
                    videoElement.style.height = '100%';
                    videoElement.style.objectFit = 'cover';
                    cameraFeed.innerHTML = '';
                    cameraFeed.appendChild(videoElement);
                }
                
                // Thi·∫øt l·∫≠p ngu·ªìn video t·ª´ backend
                videoElement.src = `${API_URL}/video_feed`;
                videoElement.onerror = () => {
                    console.error('Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi camera stream');
                };
                
                // C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t
                startButton.disabled = true;
                stopButton.disabled = false;
                
                // B·∫Øt ƒë·∫ßu ki·ªÉm tra tr·∫°ng th√°i
                statusCheckInterval = setInterval(checkCameraStatus, 1000);
                
                // ƒêƒÉng k√Ω nh·∫≠n c·∫≠p nh·∫≠t tr·∫°ng th√°i qua WebSocket
                socket.emit('start_monitoring');
                
                // Th√¥ng b√°o cho backend r·∫±ng client ƒë√£ s·∫µn s√†ng
                socket.emit('client_ready');
            }
        } catch (err) {
            console.error('L·ªói khi kh·ªüi t·∫°o camera:', err);
            alert('Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi camera. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi v·ªõi backend.');
        }
    }

    // D·ª´ng camera
    async function stopCamera() {
        try {
            // G·ª≠i y√™u c·∫ßu d·ª´ng camera ƒë·∫øn backend
            const response = await fetch(`${API_URL}/camera/stop`, {
                method: 'POST'
            });
            const data = await response.json();
            
            if (data.success) {
                // D·ª´ng ki·ªÉm tra tr·∫°ng th√°i
                if (statusCheckInterval) {
                    clearInterval(statusCheckInterval);
                    statusCheckInterval = null;
                }
                
                // X√≥a video element
                if (videoElement) {
                    videoElement.src = '';
                    cameraFeed.removeChild(videoElement);
                    videoElement = null;
                }
                
                // C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t
                startButton.disabled = false;
                stopButton.disabled = true;
                
                // Th√™m l·∫°i placeholder
                cameraFeed.innerHTML = `
                    <div class="camera-placeholder">
                        <div class="camera-icon rotate">üé•</div>
                        <p>ƒêang k·∫øt n·ªëi camera...</p>
                    </div>
                `;
            }
        } catch (err) {
            console.error('L·ªói khi d·ª´ng camera:', err);
            alert('Kh√¥ng th·ªÉ d·ª´ng camera. Vui l√≤ng th·ª≠ l·∫°i.');
        }
    }

    // Ch·∫ø ƒë·ªô to√†n m√†n h√¨nh
    function toggleFullscreen() {
        if (!document.fullscreenElement) {
            cameraFeed.requestFullscreen();
            cameraFeed.classList.add('fullscreen');
        } else {
            document.exitFullscreen();
            cameraFeed.classList.remove('fullscreen');
        }
    }

    // H√†m c·∫≠p nh·∫≠t danh s√°ch theo d√µi
    function updateTrackingList() {
        const trackingList = document.getElementById('trackingList');
        trackingList.innerHTML = '';

        Object.entries(trackingStates).forEach(([id, state]) => {
            const item = document.createElement('div');
            item.className = `tracking-item${state.fall_detected ? ' fall-detected' : ''}`;
            item.innerHTML = `
                <span class="tracking-id">ID: ${id}</span>
                <span class="tracking-action">${state.action}</span>
                <span class="tracking-status ${state.fall_detected ? 'status-warning' : 'status-normal'}">>
                    ${state.fall_detected ? 'T√© ng√£' : 'B√¨nh th∆∞·ªùng'}
                </span>
            `;
            trackingList.appendChild(item);
        });
    }

    // H√†m c·∫≠p nh·∫≠t th√¥ng tin ph√°t hi·ªán
    function updateDetectionInfo(data) {
        if (data.status === 'active') {
            statusDot.classList.remove('status-inactive');
            statusDot.classList.add('status-active');
            statusText.textContent = 'ƒêang ho·∫°t ƒë·ªông';
        } else {
            statusDot.classList.remove('status-active');
            statusDot.classList.add('status-inactive');
            statusText.textContent = 'Kh√¥ng ho·∫°t ƒë·ªông';
        }
    }

    // ƒêƒÉng k√Ω s·ª± ki·ªán cho c√°c n√∫t
    startButton.addEventListener('click', startCamera);
    stopButton.addEventListener('click', stopCamera);
    fullscreenButton.addEventListener('click', toggleFullscreen);

    // Ki·ªÉm tra tr·∫°ng th√°i camera khi t·∫£i trang
    checkCameraStatus();

    // X·ª≠ l√Ω s·ª± ki·ªán beforeunload ƒë·ªÉ gi·ªØ k·∫øt n·ªëi khi chuy·ªÉn trang
    window.addEventListener('beforeunload', function(e) {
        // Kh√¥ng d·ª´ng camera khi chuy·ªÉn trang
        e.preventDefault();
    });
});